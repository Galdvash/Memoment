{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const EventImageUpload=()=>{const[images,setImages]=useState([]);const[uploadedImages,setUploadedImages]=useState([]);const[message,setMessage]=useState(\"\");// Function to fetch all images from the server\nconst fetchAllImages=async()=>{try{const response=await axios.get(\"http://localhost:5000/api/images\");const imagePromises=response.data.map(async image=>{// Fetch the binary image data for each filename\nconst imgResponse=await axios.get(`http://localhost:5000/api/images/${encodeURIComponent(image.filename)}`,{responseType:\"blob\"}// Fetch the image as blob (binary)\n);// Create a local URL for each image\nconst imageUrl=URL.createObjectURL(imgResponse.data);return{filename:image.filename,imageUrl};});const imagesWithUrls=await Promise.all(imagePromises);setUploadedImages(imagesWithUrls);// Store the images with URLs\n}catch(error){console.error(\"Error fetching images:\",error);}};// Fetch all images when the component mounts\nuseEffect(()=>{fetchAllImages();},[]);const handleFileChange=e=>{const files=Array.from(e.target.files);// Convert to an array\nsetImages(files);// Set selected images\n};const handleUpload=async e=>{e.preventDefault();if(images.length===0){setMessage(\"Please select images to upload.\");return;}const formData=new FormData();for(let i=0;i<images.length;i++){formData.append(\"images\",images[i]);}try{const response=await axios.post(\"http://localhost:5000/api/images/upload\",formData,{headers:{\"Content-Type\":\"multipart/form-data\"}});setMessage(response.data.message);// Fetch images again to refresh the list after upload\nfetchAllImages();}catch(error){console.error(\"Error uploading images:\",error);setMessage(\"Error uploading images.\");}};return/*#__PURE__*/_jsxs(\"div\",{style:{paddingTop:\"100px\"},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Upload Event Images\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleUpload,children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",multiple:true// Allow selecting multiple images\n,onChange:handleFileChange}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Upload Images\"})]}),message&&/*#__PURE__*/_jsx(\"p\",{children:message}),/*#__PURE__*/_jsx(\"h2\",{children:\"Uploaded Images\"}),/*#__PURE__*/_jsx(\"div\",{style:{display:\"flex\",flexWrap:\"wrap\"},children:uploadedImages.map((image,index)=>/*#__PURE__*/_jsxs(\"div\",{style:{margin:\"10px\"},children:[/*#__PURE__*/_jsx(\"img\",{src:image.imageUrl// Use the image URL stored from blob\n,alt:image.filename?`Uploaded image: ${image.filename}`:\"\",style:{width:\"150px\",height:\"150px\",objectFit:\"cover\"}}),/*#__PURE__*/_jsx(\"p\",{children:image.filename})]},index))})]});};export default EventImageUpload;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","EventImageUpload","images","setImages","uploadedImages","setUploadedImages","message","setMessage","fetchAllImages","response","get","imagePromises","data","map","image","imgResponse","encodeURIComponent","filename","responseType","imageUrl","URL","createObjectURL","imagesWithUrls","Promise","all","error","console","handleFileChange","e","files","Array","from","target","handleUpload","preventDefault","length","formData","FormData","i","append","post","headers","style","paddingTop","children","onSubmit","type","multiple","onChange","display","flexWrap","index","margin","src","alt","width","height","objectFit"],"sources":["C:/Users/galdv/Desktop/MeMoment/Memoment/FrontEnd/src/component/Momentimg/EventImageUpload.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst EventImageUpload = () => {\r\n  const [images, setImages] = useState([]);\r\n  const [uploadedImages, setUploadedImages] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // Function to fetch all images from the server\r\n  const fetchAllImages = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/images\");\r\n      const imagePromises = response.data.map(async (image) => {\r\n        // Fetch the binary image data for each filename\r\n        const imgResponse = await axios.get(\r\n          `http://localhost:5000/api/images/${encodeURIComponent(\r\n            image.filename\r\n          )}`,\r\n          { responseType: \"blob\" } // Fetch the image as blob (binary)\r\n        );\r\n        // Create a local URL for each image\r\n        const imageUrl = URL.createObjectURL(imgResponse.data);\r\n        return { filename: image.filename, imageUrl };\r\n      });\r\n      const imagesWithUrls = await Promise.all(imagePromises);\r\n      setUploadedImages(imagesWithUrls); // Store the images with URLs\r\n    } catch (error) {\r\n      console.error(\"Error fetching images:\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch all images when the component mounts\r\n  useEffect(() => {\r\n    fetchAllImages();\r\n  }, []);\r\n\r\n  const handleFileChange = (e) => {\r\n    const files = Array.from(e.target.files); // Convert to an array\r\n    setImages(files); // Set selected images\r\n  };\r\n\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n    if (images.length === 0) {\r\n      setMessage(\"Please select images to upload.\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    for (let i = 0; i < images.length; i++) {\r\n      formData.append(\"images\", images[i]);\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/images/upload\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        }\r\n      );\r\n      setMessage(response.data.message);\r\n\r\n      // Fetch images again to refresh the list after upload\r\n      fetchAllImages();\r\n    } catch (error) {\r\n      console.error(\"Error uploading images:\", error);\r\n      setMessage(\"Error uploading images.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ paddingTop: \"100px\" }}>\r\n      <h1>Upload Event Images</h1>\r\n      <form onSubmit={handleUpload}>\r\n        <input\r\n          type=\"file\"\r\n          multiple // Allow selecting multiple images\r\n          onChange={handleFileChange}\r\n        />\r\n        <button type=\"submit\">Upload Images</button>\r\n      </form>\r\n      {message && <p>{message}</p>}\r\n\r\n      {/* Display uploaded images */}\r\n      <h2>Uploaded Images</h2>\r\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {uploadedImages.map((image, index) => (\r\n          <div key={index} style={{ margin: \"10px\" }}>\r\n            <img\r\n              src={image.imageUrl} // Use the image URL stored from blob\r\n              alt={image.filename ? `Uploaded image: ${image.filename}` : \"\"}\r\n              style={{ width: \"150px\", height: \"150px\", objectFit: \"cover\" }}\r\n            />\r\n            <p>{image.filename}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventImageUpload;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}